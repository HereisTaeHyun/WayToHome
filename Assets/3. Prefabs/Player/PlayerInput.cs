//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/3. Prefabs/Player/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""c1f7ed70-e884-4f75-a330-36d053e5c0df"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ab54e19f-5ae9-4834-b2f7-9e05669a0106"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""bff49308-b680-4a0e-8a31-123b4a372f78"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""6e7ada81-d143-4993-ac8b-7f305bb425f6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Submit"",
                    ""type"": ""Button"",
                    ""id"": ""90c20e6f-cddb-4086-813d-fd47806b5068"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DisplayStat"",
                    ""type"": ""Button"",
                    ""id"": ""8c3327a4-2633-4eba-9255-7be391528d38"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DisplayMenu"",
                    ""type"": ""Button"",
                    ""id"": ""3a779fbf-e286-488f-be2d-8c923bdbfd66"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""EnableMagic"",
                    ""type"": ""Button"",
                    ""id"": ""e044d4cf-6e7c-4b4f-9589-a7c6d145d8e2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectMagic1"",
                    ""type"": ""Button"",
                    ""id"": ""ac31c56c-53bc-4f89-b16e-7e730620be65"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectMagic2"",
                    ""type"": ""Button"",
                    ""id"": ""50977fcf-2eae-4b19-aa2e-3c307a746d48"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""AimPos"",
                    ""type"": ""Value"",
                    ""id"": ""05936b97-d781-4004-b000-98966711e1bb"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""4e0831fa-763b-448a-9f24-ba3d548fd1b1"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff29a280-e5f2-4f22-9d14-6fa3f916fd66"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""35f575e3-5d89-406a-b484-eb6c10061eb2"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""f8ca7484-123f-4d64-94f4-c1c564f2a277"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f6d94ead-a60c-43cb-b7b5-713fe29180d1"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f3b2afd-3205-44bd-b05a-2e7e984e6c25"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9e8d95a8-071a-451f-93ba-66225352fc6a"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisplayStat"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1ca0e09a-dbea-41b6-a81d-8a06e5a4185c"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DisplayMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56b9abb2-6c76-4caa-8868-be1dec52a68e"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableMagic"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""af2260b3-dccc-4a00-9e6b-a3d8802af81c"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMagic1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bdb2298a-7aaf-4c75-b9fd-f555faff5d8c"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectMagic2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4754206c-4a3b-428e-93a5-79c05b4e39c8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Submit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a72a5a7-8573-4e97-9070-ba6dd67abd63"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AimPos"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Mobile"",
            ""bindingGroup"": ""Mobile"",
            ""devices"": [
                {
                    ""devicePath"": ""<Touchscreen>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Submit = m_Player.FindAction("Submit", throwIfNotFound: true);
        m_Player_DisplayStat = m_Player.FindAction("DisplayStat", throwIfNotFound: true);
        m_Player_DisplayMenu = m_Player.FindAction("DisplayMenu", throwIfNotFound: true);
        m_Player_EnableMagic = m_Player.FindAction("EnableMagic", throwIfNotFound: true);
        m_Player_SelectMagic1 = m_Player.FindAction("SelectMagic1", throwIfNotFound: true);
        m_Player_SelectMagic2 = m_Player.FindAction("SelectMagic2", throwIfNotFound: true);
        m_Player_AimPos = m_Player.FindAction("AimPos", throwIfNotFound: true);
    }

    ~@PlayerInput()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInput.Player.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_Jump;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Submit;
    private readonly InputAction m_Player_DisplayStat;
    private readonly InputAction m_Player_DisplayMenu;
    private readonly InputAction m_Player_EnableMagic;
    private readonly InputAction m_Player_SelectMagic1;
    private readonly InputAction m_Player_SelectMagic2;
    private readonly InputAction m_Player_AimPos;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @Jump => m_Wrapper.m_Player_Jump;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Submit => m_Wrapper.m_Player_Submit;
        public InputAction @DisplayStat => m_Wrapper.m_Player_DisplayStat;
        public InputAction @DisplayMenu => m_Wrapper.m_Player_DisplayMenu;
        public InputAction @EnableMagic => m_Wrapper.m_Player_EnableMagic;
        public InputAction @SelectMagic1 => m_Wrapper.m_Player_SelectMagic1;
        public InputAction @SelectMagic2 => m_Wrapper.m_Player_SelectMagic2;
        public InputAction @AimPos => m_Wrapper.m_Player_AimPos;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Submit.started += instance.OnSubmit;
            @Submit.performed += instance.OnSubmit;
            @Submit.canceled += instance.OnSubmit;
            @DisplayStat.started += instance.OnDisplayStat;
            @DisplayStat.performed += instance.OnDisplayStat;
            @DisplayStat.canceled += instance.OnDisplayStat;
            @DisplayMenu.started += instance.OnDisplayMenu;
            @DisplayMenu.performed += instance.OnDisplayMenu;
            @DisplayMenu.canceled += instance.OnDisplayMenu;
            @EnableMagic.started += instance.OnEnableMagic;
            @EnableMagic.performed += instance.OnEnableMagic;
            @EnableMagic.canceled += instance.OnEnableMagic;
            @SelectMagic1.started += instance.OnSelectMagic1;
            @SelectMagic1.performed += instance.OnSelectMagic1;
            @SelectMagic1.canceled += instance.OnSelectMagic1;
            @SelectMagic2.started += instance.OnSelectMagic2;
            @SelectMagic2.performed += instance.OnSelectMagic2;
            @SelectMagic2.canceled += instance.OnSelectMagic2;
            @AimPos.started += instance.OnAimPos;
            @AimPos.performed += instance.OnAimPos;
            @AimPos.canceled += instance.OnAimPos;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Submit.started -= instance.OnSubmit;
            @Submit.performed -= instance.OnSubmit;
            @Submit.canceled -= instance.OnSubmit;
            @DisplayStat.started -= instance.OnDisplayStat;
            @DisplayStat.performed -= instance.OnDisplayStat;
            @DisplayStat.canceled -= instance.OnDisplayStat;
            @DisplayMenu.started -= instance.OnDisplayMenu;
            @DisplayMenu.performed -= instance.OnDisplayMenu;
            @DisplayMenu.canceled -= instance.OnDisplayMenu;
            @EnableMagic.started -= instance.OnEnableMagic;
            @EnableMagic.performed -= instance.OnEnableMagic;
            @EnableMagic.canceled -= instance.OnEnableMagic;
            @SelectMagic1.started -= instance.OnSelectMagic1;
            @SelectMagic1.performed -= instance.OnSelectMagic1;
            @SelectMagic1.canceled -= instance.OnSelectMagic1;
            @SelectMagic2.started -= instance.OnSelectMagic2;
            @SelectMagic2.performed -= instance.OnSelectMagic2;
            @SelectMagic2.canceled -= instance.OnSelectMagic2;
            @AimPos.started -= instance.OnAimPos;
            @AimPos.performed -= instance.OnAimPos;
            @AimPos.canceled -= instance.OnAimPos;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    private int m_MobileSchemeIndex = -1;
    public InputControlScheme MobileScheme
    {
        get
        {
            if (m_MobileSchemeIndex == -1) m_MobileSchemeIndex = asset.FindControlSchemeIndex("Mobile");
            return asset.controlSchemes[m_MobileSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnSubmit(InputAction.CallbackContext context);
        void OnDisplayStat(InputAction.CallbackContext context);
        void OnDisplayMenu(InputAction.CallbackContext context);
        void OnEnableMagic(InputAction.CallbackContext context);
        void OnSelectMagic1(InputAction.CallbackContext context);
        void OnSelectMagic2(InputAction.CallbackContext context);
        void OnAimPos(InputAction.CallbackContext context);
    }
}
